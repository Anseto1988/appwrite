name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            android
            ios
            backend
            ui
            auth
            data
            tests
            deps
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check File Size
        run: |
          # Check for large files (>1MB)
          large_files=$(find . -type f -size +1M ! -path "./.git/*" ! -path "./gradle/*" ! -name "*.jar" ! -name "*.aar")
          if [ ! -z "$large_files" ]; then
            echo "❌ Large files detected (>1MB):"
            echo "$large_files"
            exit 1
          fi

      - name: Label PR
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: validate-pr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Detekt
        run: ./gradlew detekt --no-daemon

      - name: Run KtLint
        run: ./gradlew ktlintCheck --no-daemon

      - name: Check for TODOs
        run: |
          todos=$(grep -rn "TODO\|FIXME\|HACK" --include="*.kt" --include="*.java" . || true)
          if [ ! -z "$todos" ]; then
            echo "⚠️ TODOs/FIXMEs found:"
            echo "$todos"
            echo "::warning::Found TODO/FIXME comments in code"
          fi

      - name: Upload Detekt Results
        if: always()
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_KOTLIN: true
          FILTER_REGEX_EXCLUDE: .*build/.*

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: validate-pr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Generate coverage report
        run: ./gradlew jacocoTestReport --no-daemon

      - name: Comment PR with coverage
        uses: madrapps/jacoco-report@v1.6
        with:
          paths: |
            ${{ github.workspace }}/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 60
          min-coverage-changed-files: 80
          title: Code Coverage Report
          update-comment: true

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    needs: validate-pr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'SnackTrack'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: reports/